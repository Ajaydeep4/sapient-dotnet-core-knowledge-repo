using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Parameterization
{
    public delegate void NotificationHandler(string state);
   public  class Subject
    {
        string state;
        // List<NotificationHandler> observers = new List<NotificationHandler>();
     public event    NotificationHandler StateChanged = null;
        public Subject()
        {
            
        }
        public void ChangeState()
        {
            state = $"State: {new Random().Next()}";
            NotifyAllObservers();

        }

        //Event Hooks - Generated By Compiler
        //Subscribe
        //public void Add_StateChanged(NotificationHandler observerAddress) {

        //    //System.Delegate.Combine(params Delegate[]);
        //    // this.StateChanged = System.Delegate.Combine(this.StateChanged,observerAddress) as NotificationHandler;
        //    this.StateChanged += observerAddress;
                
        //}
        ////UnSubscribe
        //public void Remove_StateChanged(NotificationHandler observerAddress) {


        //    //            this.StateChanged = System.Delegate.Remove(this.StateChanged, observerAddress) as NotificationHandler;
        //    this.StateChanged -= observerAddress;

            
        //}

        void NotifyAllObservers()
        {
            //for(int i = 0; i < observers.Count; i++)
            //{
            //    observers[i].Invoke(this.state);
            //}
            if (this.StateChanged != null)
            {
                this.StateChanged.Invoke(this.state);
            }
    //        this.StateChanged?.Invoke(this.state);
        }
    }

    public class ObserverOne {
    
        public void UpdateWhenStateChanged(string state)
        {
            Console.WriteLine($"ObserverOne Subject State Changed {state} ");
        }
    
    }

    public class ObserverTwo
    {
        public void NotfiyWhenStateChanged(string state)
        {
            Console.WriteLine($"ObserverTwo Subject State Changed {state} ");
        }

    }
}
